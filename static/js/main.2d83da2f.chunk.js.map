{"version":3,"sources":["pages/About.js","context/alert/alertContext.js","context/firebase/FirebaseContext.js","components/Form.js","components/Notes.js","components/Loader.js","pages/Home.js","components/Navbar.js","components/Alert.js","context/alert/alertReducer.js","context/types.js","context/alert/AlertState.js","context/firebase/FirebaseReducer.js","context/firebase/FIrebaseState.js","App.js","serviceWorker.js","index.js"],"names":["About","class","AlertContext","createContext","FirebaseContext","Form","useState","value","setValue","alert","useContext","firebase","onSubmit","event","preventDefault","trim","console","log","addNote","then","show","catch","className","type","placeholder","onChange","e","target","Notes","notes","onRemove","map","note","key","id","title","date","onClick","Loader","role","Home","loading","fetchNotes","removeNote","useEffect","Navbar","to","exact","Alert","hide","alertState","state","visible","text","aria-label","aria-hidden","handlers","payload","alertReducer","action","DEFAULT","AlertState","children","useReducer","dispatch","Provider","filter","firebaseReducer","url","process","REACT_APP_DB_URL","FirebaseState","showLoader","a","axios","get","res","Object","keys","data","Date","toJSON","post","name","Error","message","delete","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.2d83da2f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const About = () => (\r\n  <div class=\"jumbotron\">\r\n    <div class=\"container\">\r\n      <h1 class=\"display-4\">Лучшее React приложение</h1>\r\n      <p class=\"lead\">\r\n        Версия приложения <strong>1.0.42</strong>\r\n      </p>\r\n    </div>\r\n  </div>\r\n)","import {createContext} from 'react';\r\n\r\nexport const AlertContext = createContext();","import {createContext} from 'react';\r\n\r\nexport const FirebaseContext = createContext();","import React, {useState, useContext} from 'react'\r\nimport { AlertContext } from '../context/alert/alertContext';\r\nimport { FirebaseContext } from '../context/firebase/FirebaseContext';\r\n\r\n\r\n\r\n\r\n\r\nexport const Form = () => {\r\n\r\n  const [value, setValue] = useState('');\r\n  const alert = useContext(AlertContext);\r\n  const firebase = useContext(FirebaseContext);\r\n\r\n\r\n  const submitHandler = event => {\r\n    event.preventDefault()\r\n\r\n    if (value.trim()) {\r\n      console.log(\"FIREBASE\", firebase)\r\n      firebase.addNote(value.trim()).then(() => {\r\n        alert.show('Заметка была создана', 'success');\r\n      })\r\n      .catch(() => {\r\n        alert.show('Что-то пошло не так', 'danger');\r\n      }) \r\n\r\n      setValue('');\r\n      \r\n    } else {\r\n      alert.show('Введите название заметки')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <div className=\"form-group\">\r\n        <input\r\n          type = 'text'\r\n          className = 'form-control'\r\n          placeholder=\"Введите название заметки\"\r\n          value={value}\r\n          onChange={e => setValue(e.target.value)}\r\n        />\r\n      </div>\r\n    </form>\r\n  )\r\n}","import React from 'react';\r\n\r\n\r\nexport const Notes = ({notes, onRemove}) => {\r\n\r\n  return (\r\n    <ul className=\"list-group\">\r\n\r\n    \r\n      {notes.map(note => (\r\n        \r\n        <li \r\n          className=\"list-group-item note\"\r\n          key={note.id}\r\n          >\r\n\r\n          <div>\r\n            <strong>{note.title}</strong>\r\n            <small>{note.date}</small>\r\n          </div>\r\n          \r\n        <button \r\n            type=\"button\" \r\n            className=\"btn btn-outline-danger btn-sm\"\r\n            onClick = {() => onRemove(note.id)}\r\n            > &times; \r\n        </button>\r\n      </li>\r\n\r\n      ))}\r\n    </ul>\r\n  )\r\n}","import React from 'react';\r\n\r\nexport const  Loader = () => {\r\n  return  <div className =\"text-center\">\r\n              <div className=\"spinner-border\" role=\"status\">\r\n                <span className=\"sr-only\">Loading...</span>\r\n              </div>\r\n          </div>\r\n}","import React, {Fragment, useContext, useEffect} from 'react'\r\nimport { Form } from '../components/Form'\r\nimport { Notes } from '../components/Notes'\r\nimport { FirebaseContext } from '../context/firebase/FirebaseContext'\r\nimport { Loader } from '../components/Loader'\r\n\r\nexport const Home = () => {\r\n\r\n\r\n  const {loading, notes, fetchNotes, removeNote} = useContext(FirebaseContext)\r\n  \r\n  useEffect (() => {\r\n    fetchNotes()\r\n    //eslint-disable-next-line\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <Fragment>\r\n      <Form/>\r\n\r\n      <hr/>\r\n\r\n      {loading\r\n        ?<Loader/> :\r\n        <Notes notes={notes} onRemove={removeNote}/>\r\n      }\r\n      \r\n    </Fragment>\r\n  )\r\n}","import React, {Fragment} from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nexport const Navbar = () => (\r\n  <nav className=\"navbar navbar-dark navbar-expand-lg bg-primary\">\r\n    <div className=\"navbar-brand\">\r\n      Note App\r\n    </div>\r\n      <ul className=\"navbar-nav\">\r\n        <li className=\"nav-item\">\r\n          <NavLink\r\n            className=\"nav-link\" \r\n            to='/'\r\n            exact>Главная\r\n          </NavLink>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <NavLink\r\n            className=\"nav-link\" \r\n            to='/about'>Информация\r\n          </NavLink>\r\n        </li>\r\n      </ul>\r\n  </nav>\r\n)\r\n  ","import React, {useContext} from 'react';\r\nimport { AlertContext } from '../context/alert/alertContext';\r\n\r\nexport const Alert = () => {\r\n  const {alert, hide} = useContext(AlertContext)\r\n  const alertState = alert.state;\r\n\r\n\r\n  return (\r\n\r\n   (alertState && alertState.visible) && <div className={`alert alert-${alertState.type || 'warning'} alert-dismissible`}>\r\n      <strong>Внимание!</strong>\r\n        &nbsp;{alert.state.text}\r\n      <button onClick={hide} type=\"button\" className=\"close\"  aria-label=\"Close\">\r\n        <span aria-hidden=\"true\">&times;</span>\r\n      </button>\r\n    </div>\r\n    \r\n   \r\n  )\r\n}","import React, {useReducer} from 'react';\r\nimport { SHOW_ALERT, HIDE_ALERT } from \"../types\";\r\n\r\nconst handlers = {\r\n    [SHOW_ALERT]: (state, {payload}) => ({...state, ...payload, visible: true }),\r\n    [HIDE_ALERT]: state => ({...state ,visible: false}),\r\n    DEFAULT: state => state\r\n}\r\n\r\nexport const alertReducer = (state, action) => {\r\n  const handle = handlers[action.type] || handlers.DEFAULT\r\n\r\n  return handle(state, action)\r\n}","export const SHOW_ALERT = 'SHOW_ALERT';\r\nexport const HIDE_ALERT = 'HIDE_ALERT';\r\nexport const SHOW_LOADER = 'SHOW_LOADER';\r\nexport const ADD_NOTE = 'ADD_NOTE';\r\nexport const FETCH_NOTES = 'FETCH_NOTES';\r\nexport const REMOVE_NOTE = 'REMOVE_NOTE';","import React, { useReducer } from 'react';\r\nimport { AlertContext } from './alertContext';\r\nimport { alertReducer } from './alertReducer';\r\nimport { SHOW_ALERT, HIDE_ALERT } from '../types';\r\n\r\nexport const AlertState = ({children})  => {\r\n\r\n  const [state, dispatch] = useReducer(alertReducer,  {visible:false})\r\n\r\n  const show = (text, type = 'warning') => {\r\n    dispatch({\r\n      type: SHOW_ALERT,\r\n      payload: {text, type}\r\n    })\r\n  }\r\n\r\n  const hide = () => dispatch({type: HIDE_ALERT})\r\n\r\n\r\n  return (\r\n    <AlertContext.Provider value={{show, hide, alert: {state}}}>\r\n      {children}\r\n    </AlertContext.Provider>\r\n  )\r\n}","\r\nimport { SHOW_LOADER, ADD_NOTE, FETCH_NOTES, REMOVE_NOTE } from \"../types\"\r\n\r\nconst handlers = {\r\n  [SHOW_LOADER]: state => ({...state, loading: true}),\r\n  [ADD_NOTE]: (state, {payload}) => ({\r\n    ...state,\r\n    notes: [...state.notes, payload]}),\r\n  \r\n  [FETCH_NOTES]:(state, {payload}) => ({...state, notes: payload, loading: false}),\r\n\r\n  [REMOVE_NOTE]: (state, {payload}) => ({...state, notes: state.notes.filter(note => note.id !== payload)}),\r\n  DEFAULT: state => state\r\n}\r\n\r\n\r\nexport const firebaseReducer = (state, action) => {\r\n\r\n  const handle = handlers[action.type] || handlers.DEFAULT\r\n  return handle(state, action)\r\n}","import React, {useReducer} from 'react';\r\nimport axios from 'axios'\r\nimport { FirebaseContext } from './FirebaseContext';\r\nimport { firebaseReducer } from './FirebaseReducer';\r\nimport { SHOW_LOADER, REMOVE_NOTE, ADD_NOTE, FETCH_NOTES } from '../types';\r\n\r\n\r\nconst url =  process.env.REACT_APP_DB_URL\r\n\r\nexport const FirebaseState = ({children}) => {\r\n\r\n  const initialState = {\r\n    notes: [],\r\n    loading: false,\r\n  }\r\n\r\n  const [state, dispatch] = useReducer(firebaseReducer, initialState)\r\n\r\n  const showLoader = () => dispatch({type: SHOW_LOADER})\r\n\r\n  const fetchNotes = async () => {\r\n    showLoader()\r\n    const res = await axios.get(`${url}/notes.json`)\r\n\r\n    let payload = Object.keys(res.data).map(key => {\r\n      return {\r\n        ...res.data[key],\r\n        id: key\r\n      }\r\n    })\r\n\r\n    dispatch({\r\n      type: FETCH_NOTES,\r\n      payload\r\n    })\r\n  }\r\n\r\n\r\n  const addNote = async title => {\r\n    const note = {\r\n      title, date: new Date().toJSON()\r\n    }\r\n\r\n    try {\r\n      const res = await axios.post(`${url}/notes.json`, note);\r\n      \r\n      let payload = {\r\n        ...note,\r\n        id: res.data.name,\r\n      }\r\n\r\n      dispatch ({\r\n        type: ADD_NOTE,\r\n        payload\r\n      })\r\n      \r\n    } catch (e) {\r\n      throw new Error(e.message)\r\n    }\r\n\r\n   \r\n  }\r\n\r\n  const removeNote = async id => {\r\n\r\n    await axios.delete (`${url}/notes/${id}.json`)\r\n\r\n    dispatch({\r\n      type: REMOVE_NOTE,\r\n      payload: id\r\n    })\r\n  }\r\n  return (\r\n    <FirebaseContext.Provider value={{showLoader, addNote, removeNote, fetchNotes,\r\n     loading: state.loading,\r\n     notes: state.notes}}>\r\n      {children}\r\n    </FirebaseContext.Provider>\r\n  )\r\n}","import React from 'react';\r\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\r\nimport { About } from './pages/About';\r\nimport { Home } from './pages/Home';\r\nimport { Navbar } from './components/Navbar';\r\nimport { Alert } from './components/Alert';\r\nimport { AlertState } from './context/alert/AlertState';\r\nimport { FirebaseState } from './context/firebase/FIrebaseState';\r\n\r\nfunction App() {\r\n  return (\r\n    <FirebaseState>\r\n      <AlertState>\r\n        <BrowserRouter>\r\n          <Navbar/>\r\n            <div className=\"container pt-4\">\r\n              <Alert/>\r\n              <Switch>\r\n                <Route path={'/'} exact component={Home}/>\r\n                <Route path={'/about'} component={About}/>\r\n              </Switch>\r\n            </div>\r\n      </BrowserRouter>\r\n    </AlertState>\r\n    </FirebaseState>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}